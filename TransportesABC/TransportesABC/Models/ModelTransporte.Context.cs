//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransportesABC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TransporteEntities : DbContext
    {
        public TransporteEntities()
            : base("name=TransporteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Auto> Auto { get; set; }
        public virtual DbSet<Solicitud_Transporte> Solicitud_Transporte { get; set; }
    
        public virtual int Agregar_Auto(string marca, string modelo, Nullable<int> folio, string color, string transmision, string descripcion, Nullable<int> solicitud)
        {
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var transmisionParameter = transmision != null ?
                new ObjectParameter("Transmision", transmision) :
                new ObjectParameter("Transmision", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var solicitudParameter = solicitud.HasValue ?
                new ObjectParameter("Solicitud", solicitud) :
                new ObjectParameter("Solicitud", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Auto", marcaParameter, modeloParameter, folioParameter, colorParameter, transmisionParameter, descripcionParameter, solicitudParameter);
        }
    
        public virtual int Editar_Auto(Nullable<int> autoID, string marca, string modelo, Nullable<int> folio, string color, string transmision, string descripcion)
        {
            var autoIDParameter = autoID.HasValue ?
                new ObjectParameter("AutoID", autoID) :
                new ObjectParameter("AutoID", typeof(int));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var transmisionParameter = transmision != null ?
                new ObjectParameter("Transmision", transmision) :
                new ObjectParameter("Transmision", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Editar_Auto", autoIDParameter, marcaParameter, modeloParameter, folioParameter, colorParameter, transmisionParameter, descripcionParameter);
        }
    
        public virtual ObjectResult<Mostrar_Autos_Result> Mostrar_Autos(Nullable<int> solicitud)
        {
            var solicitudParameter = solicitud.HasValue ?
                new ObjectParameter("Solicitud", solicitud) :
                new ObjectParameter("Solicitud", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Mostrar_Autos_Result>("Mostrar_Autos", solicitudParameter);
        }
    
        public virtual ObjectResult<Mostrar_Autos_Blancos_Result> Mostrar_Autos_Blancos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Mostrar_Autos_Blancos_Result>("Mostrar_Autos_Blancos");
        }
    
        public virtual int Registro_Solicitud(Nullable<System.DateTime> fecha, Nullable<int> lote)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var loteParameter = lote.HasValue ?
                new ObjectParameter("Lote", lote) :
                new ObjectParameter("Lote", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Registro_Solicitud", fechaParameter, loteParameter);
        }
    }
}
